{"version":3,"sources":["components/box.jsx","components/bigBox.jsx","components/field.jsx","SudokuSolver.js","components/newGameScreen.jsx","components/winScreen.jsx","App.js","reportWebVitals.js","index.js"],"names":["Box","state","renderBox","name","props","box","number","solution","settings","showMistakes","selected","changeable","onClick","onBoxClick","className","Fragment","this","Component","BigBox","bigBox","map","renderBoxArray","id","boxId","console","log","Field","renderBigBoxArray","content","getBigBoxContent","bigBoxId","bigBoxIndex","array","boxes","bigBoxRow","Math","floor","row","i","index","push","SudokuSolver","numbers","slice","columnNumbers","col","zeroIndex","indexOf","shuffle","isValidToAdd","isSolveable","a","length","j","random","Error","rowNum","colNum","boxNum","getRow","includes","getColumn","getBox","NewGameScreen","style","position","backgroundColor","width","height","marginLeft","marginTop","opacity","fontWeight","role","display","justifyContent","difficulty","onDifficultyChange","selectedDifficulty","onStart","WinScreen","handleReplay","App","totalBoxes","maxNumber","newGameVisible","winScreenVisible","initializeBoxes","generateRandomSolution","numbersToRemove","getGivenNumbers","removeOneNumber","initializeEmptyBoxes","getSolution","handleBoxSelect","setState","handleKeyPressed","event","isFinite","key","handleNumberInput","handleDifficultyChange","handleStart","document","getElementById","checked","addEventListener","bind","removeEventListener","onKeyDown","e","handleKeyPress","num","type","fontSize","value","filter","newBoxes","activeBox","endFlag","getNumberOfEmptyBoxes","handleEndGame","dif","givenNumbers","isCorrectSolution","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a5f0ca66.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../box.css\";\r\nclass Box extends Component {\r\n  state = {};\r\n  render() {\r\n    return <React.Fragment>{this.renderBox()}</React.Fragment>;\r\n  }\r\n  renderBox = () => {\r\n    let name = \"box\";\r\n    if (\r\n      +this.props.box.number !== +this.props.box.solution &&\r\n      this.props.settings.showMistakes\r\n    ) {\r\n      name += \" incorrect\";\r\n    }\r\n    if (this.props.box.selected) {\r\n      name += \" boxSelected\";\r\n    }\r\n    if (this.props.box.changeable) {\r\n      name += \" boxUser\";\r\n    } else {\r\n      name += \" boxGiven\";\r\n    }\r\n    return (\r\n      <div\r\n        onClick={() => this.props.onBoxClick(this.props.box)}\r\n        className={name}\r\n      >\r\n        {this.props.box.number !== 0 && this.props.box.number}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Box;\r\n","import React, { Component } from \"react\";\r\nimport Box from \"./box.jsx\";\r\nimport \"../box.css\";\r\nclass BigBox extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"bigBox\">\r\n        {this.props.bigBox.map((box) => this.renderBoxArray(box.id, box))}\r\n      </div>\r\n    );\r\n  }\r\n  renderBoxArray(boxId, box) {\r\n    if (true) {\r\n      return (\r\n        <React.Fragment key={box.id}>\r\n          <Box\r\n            onBoxClick={this.props.onBoxClick}\r\n            box={box}\r\n            settings={this.props.settings}\r\n          />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n  mCon(id) {\r\n    console.log(\"hello\");\r\n  }\r\n}\r\n\r\nexport default BigBox;\r\n","import React, { Component } from \"react\";\r\nimport BigBox from \"./bigBox\";\r\nimport \"../box.css\";\r\nclass Field extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"field\">\r\n        {[0, 1, 2, 3, 4, 5, 6, 7, 8].map((bigBoxId) =>\r\n          this.renderBigBoxArray(bigBoxId)\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  getBigBoxContent(bigBoxIndex) {\r\n    let array = this.props.boxes;\r\n    let bigBoxRow = Math.floor(bigBoxIndex / 3);\r\n    bigBoxIndex = bigBoxIndex % 3;\r\n    let content = [];\r\n    for (let row = 0; row < 3; row++) {\r\n      for (let i = 0; i < 3; i++) {\r\n        let index = bigBoxRow * 27 + row * 9 + bigBoxIndex * 3 + i;\r\n        content.push(array[index]);\r\n      }\r\n    }\r\n    return content;\r\n  }\r\n  renderBigBoxArray = (boxId) => {\r\n    let content = this.getBigBoxContent(boxId);\r\n    return (\r\n      <React.Fragment key={boxId}>\r\n        <BigBox\r\n          onBoxClick={this.props.onBoxClick}\r\n          bigBox={content}\r\n          settings={this.props.settings}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Field;\r\n","class SudokuSolver {\r\n  constructor(numbers) {\r\n    this.numbers = numbers;\r\n  }\r\n\r\n  getRow(index) {\r\n    return this.numbers.slice(index * 9, (index + 1) * 9);\r\n  }\r\n\r\n  getColumn(index) {\r\n    let columnNumbers = [];\r\n    for (let row = 0; row < 9; row++) {\r\n      columnNumbers.push(this.numbers[index + row * 9]);\r\n    }\r\n    return columnNumbers;\r\n  }\r\n\r\n  getBox(bigBoxIndex) {\r\n    let bigBoxRow = Math.floor(bigBoxIndex / 3);\r\n    bigBoxIndex = bigBoxIndex % 3;\r\n    let content = [];\r\n    for (let row = 0; row < 3; row++) {\r\n      for (let col = 0; col < 3; col++) {\r\n        let index = bigBoxRow * 27 + row * 9 + bigBoxIndex * 3 + col;\r\n        content.push(this.numbers[index]);\r\n      }\r\n    }\r\n    return content;\r\n  }\r\n\r\n  isSolveable() {\r\n    let zeroIndex = this.numbers.indexOf(0);\r\n    if (zeroIndex === -1) {\r\n      return true;\r\n    }\r\n    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n    this.shuffle(numbers);\r\n    for (let i = 0; i < 9; i++) {\r\n      if (this.isValidToAdd(numbers[i], zeroIndex)) {\r\n        this.numbers[zeroIndex] = numbers[i];\r\n        if (this.isSolveable()) {\r\n          return true;\r\n        }\r\n        this.numbers[zeroIndex] = 0;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Fisher-Yates shuffle algorithm\r\n  shuffle(a) {\r\n    for (let i = a.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [a[i], a[j]] = [a[j], a[i]];\r\n    }\r\n    return a;\r\n  }\r\n\r\n  getSolution() {\r\n    if (!this.isSolveable()) {\r\n      new Error(\"No solution\");\r\n    } else {\r\n      return this.numbers;\r\n    }\r\n  }\r\n\r\n  isValidToAdd(number, index) {\r\n    let rowNum = Math.floor(index / 9);\r\n    let colNum = index % 9;\r\n    let boxNum = Math.floor(rowNum / 3) * 3 + Math.floor(colNum / 3);\r\n\r\n    if (this.getRow(rowNum).includes(number)) {\r\n      return false;\r\n    }\r\n    if (this.getColumn(colNum).includes(number)) {\r\n      return false;\r\n    }\r\n    if (this.getBox(boxNum).includes(number)) {\r\n      this.numbers[index] = 0;\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default SudokuSolver;\r\n","import React, { Component } from \"react\";\r\n\r\nclass NewGameScreen extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          position: \"absolute\",\r\n          backgroundColor: \"grey\",\r\n          width: \"30vh\",\r\n          height: \"20vh\",\r\n          marginLeft: \"10vh\",\r\n          marginTop: \"15vh\",\r\n          opacity: 0.95,\r\n        }}\r\n      >\r\n        <span style={{ fontWeight: \"bold\" }}>Select difficulty:</span>\r\n        <br />\r\n        <div\r\n          className=\"btn-group mt-1\"\r\n          role=\"group\"\r\n          aria-label=\"Difficulty selection\"\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          {[\"Easy\", \"Medium\", \"Hard\"].map((difficulty) => (\r\n            <button\r\n              key={difficulty}\r\n              onClick={() => this.props.onDifficultyChange(difficulty)}\r\n              className={\r\n                \"btn btn-outline-dark\" +\r\n                (difficulty === this.props.selectedDifficulty ? \" active\" : \"\")\r\n              }\r\n            >\r\n              {<span style={{ fontWeight: \"bold\" }}>{difficulty}</span>}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <br />\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <button className=\"btn btn-success mt-2\" onClick={this.props.onStart}>\r\n            Start Sudoku\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewGameScreen;\r\n","import React, { Component } from \"react\";\r\n\r\nclass WinScreen extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          backgroundColor: \"grey\",\r\n          width: \"30vh\",\r\n          height: \"20vh\",\r\n          marginLeft: \"10vh\",\r\n          marginTop: \"15vh\",\r\n          opacity: 0.95,\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            marginTop: \"5vh\",\r\n            fontWeight: \"bold\",\r\n          }}\r\n        >\r\n          Victory\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <button className=\"btn btn-success\" onClick={this.props.handleReplay}>\r\n            Play again\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WinScreen;\r\n","import React, { Component } from \"react\";\nimport Field from \"./components/field\";\nimport SudokuSolver from \"./SudokuSolver\";\nimport NewGameScreen from \"./components/newGameScreen\";\nimport WinScreen from \"./components/winScreen\";\nclass App extends Component {\n  state = {\n    totalBoxes: 81,\n    maxNumber: 9,\n    boxes: [],\n    settings: { showMistakes: false },\n    selectedDifficulty: \"Easy\",\n    newGameVisible: true,\n    winScreenVisible: false,\n  };\n  constructor() {\n    super();\n    this.state.boxes = this.initializeEmptyBoxes();\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPressed.bind(this));\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPressed.bind(this));\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <main className=\"container\">\n          <div className=\"row mt-5\">\n            <div className=\"col\">\n              {this.state.newGameVisible && (\n                <NewGameScreen\n                  onDifficultyChange={this.handleDifficultyChange}\n                  onStart={this.handleStart}\n                  selectedDifficulty={this.state.selectedDifficulty}\n                />\n              )}\n              {this.state.winScreenVisible && (\n                <WinScreen handleReplay={this.handleReplay} />\n              )}\n              <Field\n                onKeyDown={(e) => this.handleKeyPress(e)}\n                onBoxClick={this.handleBoxSelect}\n                boxes={this.state.boxes}\n                settings={this.state.settings}\n              />\n              <div\n                className=\"btn-group mt-3 w-75\"\n                role=\"group\"\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((num) => (\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-secondary ms-1\"\n                    onClick={() => this.handleNumberInput(num)}\n                    key={num}\n                    style={{\n                      fontSize: \"2vmin\",\n                    }}\n                  >\n                    {num}\n                  </button>\n                ))}\n              </div>\n            </div>\n            <div className=\"col\">\n              Instructions:\n              <br />\n              Select a field and press a number on the bottom or on your\n              keyboard. Every 3x3 Box, vertical column and horizontal column can\n              contain each number from 1 to 9 only once.\n              <div className=\"mt-5\">Options:</div>\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"checkbox\"\n                  value=\"\"\n                  id=\"showMistakesCheck\"\n                  onClick={() =>\n                    this.setState({\n                      settings: {\n                        showMistakes:\n                          document.getElementById(\"showMistakesCheck\").checked,\n                      },\n                    })\n                  }\n                ></input>\n                <label className=\"form-check-label\">Show mistakes</label>\n              </div>\n            </div>\n          </div>\n        </main>\n      </React.Fragment>\n    );\n  }\n\n  initializeBoxes = () => {\n    let boxes = this.generateRandomSolution();\n    let numbersToRemove = this.state.totalBoxes - this.getGivenNumbers();\n    for (let i = 0; i < numbersToRemove; i++) {\n      this.removeOneNumber(boxes);\n    }\n    return boxes;\n  };\n\n  removeOneNumber(boxes) {\n    let index = 0;\n    while (true) {\n      index = Math.floor(Math.random() * this.state.totalBoxes);\n      if (boxes[index].number !== 0) {\n        break;\n      }\n    }\n    boxes[index].number = 0;\n    boxes[index].changeable = true;\n  }\n\n  generateRandomSolution = () => {\n    let boxes = this.initializeEmptyBoxes();\n    let numbers = boxes.map((box) => box.number);\n    let solver = new SudokuSolver(numbers);\n    let solution = solver.getSolution();\n    boxes.map((box) => {\n      box.number = solution[box.id];\n      box.solution = solution[box.id];\n      return box;\n    });\n    return boxes;\n  };\n\n  isSolveableSudoku(boxes) {\n    let numbers = boxes.map((box) => box.number);\n    let solver = new SudokuSolver(numbers);\n    return solver.isSolveable();\n  }\n\n  isCorrectSolution() {\n    const { boxes, totalBoxes } = this.state;\n    return (\n      boxes.filter((box) => +box.number === +box.solution).length === totalBoxes\n    );\n  }\n\n  initializeEmptyBoxes = () => {\n    let boxes = [];\n    for (let i = 0; i < this.state.totalBoxes; i++) {\n      boxes.push({\n        id: i,\n        number: 0,\n        selected: false,\n        solution: 0,\n        changeable: false,\n      });\n    }\n    return boxes;\n  };\n\n  getNumberOfEmptyBoxes() {\n    const numbers = this.state.boxes.map((box) => box.number);\n    return numbers.filter((i) => i === 0).length;\n  }\n\n  handleBoxSelect = (box) => {\n    let id = this.state.boxes.indexOf(box);\n    let boxes = [...this.state.boxes];\n    boxes = boxes.map((box) => {\n      box.selected = false;\n      return box;\n    });\n    boxes[id].selected = true;\n    this.setState({ boxes });\n  };\n\n  handleKeyPressed = (event) => {\n    if (isFinite(event.key)) {\n      this.handleNumberInput(event.key);\n    }\n  };\n\n  handleNumberInput(number) {\n    if (this.state.newGameVisible || this.state.winScreenVisible) {\n      return;\n    }\n    let newBoxes = [...this.state.boxes];\n    let activeBox = this.state.boxes.filter((box) => box.selected);\n    let endFlag = false;\n    if (activeBox.length !== 0 && activeBox[0].changeable) {\n      newBoxes[this.state.boxes.indexOf(activeBox[0])].number = number;\n      if (this.getNumberOfEmptyBoxes() < 1) {\n        endFlag = true;\n      }\n    }\n    this.setState({ boxes: newBoxes });\n    if (endFlag) {\n      this.handleEndGame();\n    }\n  }\n\n  handleDifficultyChange = (difficulty) => {\n    this.setState({ selectedDifficulty: difficulty });\n  };\n\n  handleStart = () => {\n    this.setState({\n      newGameVisible: false,\n      boxes: this.initializeBoxes(),\n    });\n  };\n\n  getGivenNumbers() {\n    const { selectedDifficulty: dif } = this.state;\n    let givenNumbers = 50;\n    if (dif === \"Medium\") {\n      givenNumbers = 40;\n    }\n    if (dif === \"Hard\") {\n      givenNumbers = 30;\n    }\n    return givenNumbers;\n  }\n\n  handleEndGame() {\n    if (this.isCorrectSolution()) {\n      this.setState({ winScreenVisible: true });\n    } else {\n      this.setState({ settings: { showMistakes: true } });\n      document.getElementById(\"showMistakesCheck\").checked = true;\n    }\n  }\n\n  handleReplay = () => {\n    document.getElementById(\"showMistakesCheck\").checked = false;\n    this.setState({\n      winScreenVisible: false,\n      newGameVisible: true,\n      settings: { showMistakes: false },\n    });\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}